/*! XProcess.h
********************************************************************************
                          #    #  ####  #####  #####  
                           #  #  #    # #    # #    # 
                            ##   #      #    # #    # 
                            ##   #      #####  #####  
                           #  #  #    # #      #      
                          #    #  ####  #      #      
--------------------------------------------------------------------------------
description			:  A simple cross platform process interface
related files		:  stdafx.h XUtils.h XProcess.cpp
create date			:  2014-09-10
author				:  CHENQ
version				:	---
--------------------------------------------------------------------------------
If you find any bugs, please e-mail me chennqqi@qq.com  
--------------------------------------------------------------------------------

history :
2014/09/10			CHENQ	created
*******************************************************************************/

#ifndef __XPROCESS_H__
#define __XPROCESS_H__

#include "XSTLMacro.h"

#if defined(OS_WIN)
typedef HANDLE XProcessHandle;
typedef DWORD XProcessId;
#elif defined(OS_POSIX)
// On POSIX, our ProcessHandle will just be the PID.
typedef pid_t XProcessHandle;
typedef pid_t XProcessId;
#endif  // defined(OS_WIN)



class CXProcess
{
public:
	enum Status
	{
		Running,
		NotRunning,
	};
	/**
		@brief 初始化进程环境
			如果需要创建子进程，请务必使用该函数，否则您需要自己编写代码来防止形成僵尸进程	
	*/
	static void Init();

	/**
	@brief 初始化进程环境
		如果父进程退出，子进程自动退出;
	*/
	static void InitProcessAttached();

	//按照空格分隔的命令行
	static BOOL Create(const CXProcessCommandLine& cmdline, const XLaunchOptions& options, CXProcess* pProcess=NULL);

	static BOOL Create(const std::string& program, const std::list<std::string>& arguments, 
		const XLaunchOptions& options, ProcessHandle* pHandle, ProcessId* pid = NULL);

	static void CloseProcessHandle(ProcessHandle handle);
#ifdef OS_POSIX
	static char** GetEnvironment();
	static char** AlterEnvironment(const XEnvironmentVector& changes, const char* const* const env);
	static void SetEnvironment(char** env);
#endif

#ifdef OS_WIN
	ProcessId GetProcessIdByHandle(HANDLE Process);
#endif

	static BOOL Kill(ProcessHandle process, int exit_code, bool wait);
	static void Terminate(CXProcess* pProcess);

	static ProcessId GetCurrentProcessId();
	static XString16 GetCurrentExcutePathW();
	static std::string GetCurrentExcutePath();


};

#ifdef XCPP_DEVELOP_CODE
#if X_VERSION_VALUE>X_VERSION_MAKE(0,7,0)

class CXProcessEx
{
public:
	class XProcessId
	{

	};


//	XProcessId GetProcessId() const;
//	int GetExitCode() const;

	/* @brief 运行一个程序
		@detail 函数被调用后当前线程被阻塞，直到子进程返回\n
			
		@param [in] cmd,执行程序名称（或者全路径）,
		@param [in] paramList,参数列表
		@param [out] pReturn, 可以利用这个参数返回子进程的标准数据文本
		@return //TODO::
	*/
	static int Execute(const XSTLString& cmd, XSTLString* pReturn = NULL);
	static int Execute(const XSTLString& cmd, const XSTLStringList& paramList, XSTLString* pReturn=NULL);

	/* @brief 运行一个程序
		@detail 函数启动子进程后立即返回，主进程退出后子进程继续执行
	@param [in] cmd,执行程序名称（或者全路径）,
	@param [in] paramList,参数列表
	@param [out] pRunText, 返回
	@return //TODO::
	*/
	static int StartDetached(const XSTLString& cmd);
	static int StartDetached(const XSTLString& cmd, const XSTLStringList& paramList);


	/**
		@brief 初始化进程环境
			如果需要创建子进程，请务必使用该函数，否则您需要自己编写代码来防止形成僵尸进程	
	*/
	static void Init();

	/**
	@brief 初始化进程环境
		如果父进程退出，子进程自动退出;
	*/
	static void InitProcessAttached();


	static XSTLString GetWorkingDir();
	static XSTLString GetExcuteName();
	static XSTLString GetExcutePath();

	static std::string GetCurrentExcuteName();
	static BOOL IsProcessExit(ProcessHandle pHandle);
	
	
	#ifdef OS_WIN
	ProcessId GetProcessIdByHandle(HANDLE Process);
#endif

	static BOOL Kill(ProcessHandle process, int exit_code, bool wait);
	static void Terminate(CXProcess* pProcess);

	static ProcessId GetCurrentProcessId();
	static XString16 GetCurrentExcutePathW();
	static std::string GetCurrentExcutePath();


	#if 0
	UINT64 GetRunTimeNs() const;
	BOOL TerminateProcess(int exit_code);
	BOOL IsExit();
	BOOL Close();


	#endif
	
private:
	XProcessId m_pid;
};
#endif // endof
#endif //endof XCPP_DEVELOP_CODE




#endif